project:
  env: '@project.env@'

app:
  url:
    address: 'http://localhost:8080'
spring:
  data:
    redis:
      host: 138.2.46.52
      port: 30678
      password: RedisPassword123
      database: 0
      timeout: 5000ms
      lettuce:
        pool:
          max-active: 3000
          max-idle: 8
          min-idle: 4
          max-wait: 5000ms
        shutdown-timeout: 100ms
      # 添加錯誤處理
      connect-timeout: 5000ms
      command-timeout: 5000ms
  session:
    store-type: redis
    redis:
      namespace: tymb:sessions
  config:
    import: classpath:env/local.properties
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: '@keycloak.auth-server-url@/realms/@keycloak.realm@'
          jwk-set-uri: '@keycloak.auth-server-url@/realms/@keycloak.realm@/protocol/openid-connect/certs'
  datasource:
    driver-class-name: org.postgresql.Driver
    url: '@spring.datasource.url@'
    username: '@spring.datasource.username@'
    password: '@spring.datasource.password@'
    hikari:
      minimum-idle: 5
      maximum-pool-size: 20
      idle-timeout: 30000
      pool-name: HikariCP
      max-lifetime: 1800000
      connection-timeout: 30000
      leak-detection-threshold: 2000
  # People datasource configuration
  people-datasource:
    driver-class-name: org.postgresql.Driver
    url: '@spring.people-datasource.url@'
    username: '@spring.people-datasource.username@'
    password: '@spring.people-datasource.password@'
    hikari:
      minimum-idle: 5
      maximum-pool-size: 10
      idle-timeout: 30000
      pool-name: PeopleHikariCP
      max-lifetime: 1800000
      connection-timeout: 30000
      leak-detection-threshold: 2000
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
  main:
    allow-bean-definition-overriding: true
    web-application-type: servlet
  devtools:
    restart:
      enabled: false
springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    path: /swagger-ui.html

logging:
  level:
    root: INFO
    org:
      springframework: INFO
      springframework.security: DEBUG
      springframework.security.oauth2: DEBUG
      springframework.web.filter.CommonsRequestLoggingFilter: DEBUG
      springframework.security.oauth2.server.resource: DEBUG
      springframework.security.oauth2.jwt: DEBUG
      hibernate:
        SQL: OFF
        type:
          descriptor:
            sql: OFF
    '[io.micrometer]': INFO
    # 添加JWT相關的詳細日誌
    'org.springframework.security.oauth2.jwt': DEBUG
    'org.springframework.security.oauth2.server.resource.authentication': DEBUG
    'org.springframework.security.oauth2.server.resource.web': DEBUG

server:
  port: 8080
  servlet:
    context-path: /tymb
  tomcat:
    connection-timeout: 20000
    max-http-form-post-size: 3145728
  error:
    whitelabel:
      enabled: true
  max-http-request-header-size: 3145728
  ssl:
    enabled: false

management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health,metrics,prometheus,info,loggers,env
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
      # 禁用Redis健康檢查
      group:
        redis:
          include: redis
          show-components: never

keycloak:
  auth-server-url: '@keycloak.auth-server-url@'
  realm: '@keycloak.realm@'
  resource: '@keycloak.clientId@'
  public-client: false
  cors: true
  credentials:
    secret: '@keycloak.credentials.secret@'
  bearer-only: true
  security-constraints:
    - authRoles: default-roles-peoplesystem
      securityCollections:
        - patterns:
            - /*
url:
  address: http://localhost:8080/tymb
  frontend: http://localhost:4321/tymultiverse/
